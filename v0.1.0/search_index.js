var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage and Examples","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"Start by using all the the needed packages for this walkthrough tutorial and create a MultiGraph.","category":"page"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"julia> using WrappedMultiGraphs, Graphs\n\njulia> mg = MultiGraph(complete_graph(3))\n{3, 3} undirected multi Int64 graph","category":"page"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"Now go on and add some extra edges!","category":"page"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"julia> add_edge!(mg, 1, 2)\ntrue\n\njulia> add_edge!(mg, 1, 3)\ntrue\n\njulia> mg\n{3, 5} undirected multi Int64 graph\n\njulia> edges(mg)\nSimpleEdgeIter 5\n\njulia> edges(mg) |> collect\n5-element Vector{Any}:\n Edge 1 => 2\n Edge 1 => 2\n Edge 1 => 3\n Edge 1 => 3\n Edge 2 => 3","category":"page"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"The edges function operates exactly as before, only that if multiple edges exist, they are returned one by one. To differentiate between the edges you can use the asmultiedge function:","category":"page"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"julia> asmultiedges(edges(mg))\n5-element Vector{SingleMultiEdge{Int64}}:\n 1-th Edge 1 => 2\n 2-th Edge 1 => 2\n 1-th Edge 1 => 3\n 2-th Edge 1 => 3\n 1-th Edge 2 => 3","category":"page"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"To query the multiplicity of an edge you can use the multiplicity function","category":"page"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"julia> multiplicity(mg, Edge(1,2))\n2","category":"page"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"If you have problems with the interface you can open an issue and in the meantime  access the wrapped struct:","category":"page"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"julia> getgraph(mg)\n{3, 5} undirected simple Int64 graph","category":"page"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"However, know that the wrapped graph might be in a corrupted state for the Graphs.jl to fully process.","category":"page"},{"location":"#WrappedMultiGraphs.jl","page":"Introduction","title":"WrappedMultiGraphs.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A simplistic julia package implementing multi graphs. This package aims to be fully compliant with Graphs.jl.","category":"page"},{"location":"#Implementation","page":"Introduction","title":"Implementation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To support multigraphs very little changes need to be made in the source code of Graphs.jl. Since the code needed is extremely similar to Graphs.SimpleGraphs we wrap a SimpleGraph type in a MultiGraph type (similarly for SimpleDiGraph). Otherwise extreme code repetition is needed. Instead we use composition and forward useful functions. At the moment there is not a clean way to conduct an exhaustive forwarding. So we do that traditionally be manually specifying and forwarding the needed functions. No big brain things.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Use graph() to access the underlying wrapped graph. Attention: we also wrap getproperty, so the dot syntax returns fields of the wrapped struct.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Basically, this package kills this if statement and deals with the repercussions. The function edges() will return AbstractEdgethat will repeat if there are multiple edges. Use the asmultiedges to convert the edges into a collection of SingleMultiEdge.","category":"page"},{"location":"#Similar-packages-and-differences","page":"Introduction","title":"Similar packages and differences","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Multigraphs.jl\nuses Dict instead of Vector to enumerate nodes and connections.\ndefines and solely uses an Edge type MultipleEdge\ndoesn't wrap Simple(Di)Graph","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [WrappedMultiGraphs]\nPrivate = false\nOrder   = [:function, :type]","category":"page"},{"location":"API/#WrappedMultiGraphs.asmultiedges-Tuple{Any}","page":"API","title":"WrappedMultiGraphs.asmultiedges","text":"asmultiedges(edgs) -> Any\n\n\nGet a collection of SingleMultiEdge from the edgs\n\n\n\n\n\n","category":"method"},{"location":"API/#WrappedMultiGraphs.getgraph-Tuple{WrappedMultiGraphs.AbstractMultiGraph}","page":"API","title":"WrappedMultiGraphs.getgraph","text":"getgraph(mg::WrappedMultiGraphs.AbstractMultiGraph) -> Any\n\n\nGet the wrapped graph\n\n\n\n\n\n","category":"method"},{"location":"API/#WrappedMultiGraphs.multiplicity-Tuple{MultiDiGraph, Graphs.SimpleGraphs.SimpleEdge}","page":"API","title":"WrappedMultiGraphs.multiplicity","text":"multiplicity(\n    mg::MultiDiGraph,\n    e::Graphs.SimpleGraphs.SimpleEdge\n) -> Int64\n\n\nGet the multiplicity, i.e. the number, of the edge e\n\n\n\n\n\n","category":"method"},{"location":"API/#WrappedMultiGraphs.multiplicity-Union{Tuple{T}, Tuple{MultiGraph, T, T}} where T<:Integer","page":"API","title":"WrappedMultiGraphs.multiplicity","text":"multiplicity(\n    mg::MultiGraph,\n    s::Integer,\n    d::Integer\n) -> Int64\n\n\nGet the multiplicity, i.e. the number, of an edge with source s and destination d.\n\n\n\n\n\n","category":"method"},{"location":"API/#WrappedMultiGraphs.todirected-Tuple{MultiGraph}","page":"API","title":"WrappedMultiGraphs.todirected","text":"todirected(mg::MultiGraph) -> MultiDiGraph\n\n\nConvert to a directed graph\n\n\n\n\n\n","category":"method"},{"location":"API/#WrappedMultiGraphs.toundirected-Tuple{MultiDiGraph}","page":"API","title":"WrappedMultiGraphs.toundirected","text":"toundirected(mg::MultiDiGraph) -> MultiGraph\n\n\nConvert to an undirected graph\n\n\n\n\n\n","category":"method"},{"location":"API/#WrappedMultiGraphs.MultiDiGraph","page":"API","title":"WrappedMultiGraphs.MultiDiGraph","text":"mutable struct MultiDiGraph{T<:Integer} <: WrappedMultiGraphs.AbstractMultiGraph{T<:Integer}\n\ngraph::SimpleDiGraph: The wrapped graph\n\n\n\n\n\n","category":"type"},{"location":"API/#WrappedMultiGraphs.MultiGraph","page":"API","title":"WrappedMultiGraphs.MultiGraph","text":"struct MultiGraph{T<:Integer} <: WrappedMultiGraphs.AbstractMultiGraph{T<:Integer}\n\ngraph::SimpleGraph: The wrapped graph\n\n\n\n\n\n","category":"type"},{"location":"API/#WrappedMultiGraphs.SingleMultiEdge","page":"API","title":"WrappedMultiGraphs.SingleMultiEdge","text":"struct SingleMultiEdge{T<:Integer} <: Graphs.SimpleGraphs.AbstractSimpleEdge{T<:Integer}\n\nsrc::Integer: The source node\ndst::Integer: The destination node\nm::Integer: The multiplicity of the edge\n\nThe m-th instance of an edge connecting src and dst.\n\n\n\n\n\n","category":"type"},{"location":"API/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"","category":"page"}]
}
